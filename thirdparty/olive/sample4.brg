%{
/*
   FILE: sample4.brg
  
   Copyright (c) 1997 Princeton University

   All rights reserved.

   This software is to be used for non-commercial purposes only,
   unless authorized permission to do otherwise is obtained.  
   For more information, contact spam@ee.princeton.edu
*/

#include <assert.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
enum {
	ADDI=309, ADDRLP=295, ASGNI=53,
	CNSTI=21, CVCI=85, I0I=661, INDIRC=67
};

typedef struct tree {
	int op;
	struct tree *kids[2];
	int val;
	struct { struct burm_state *state; } x;
} *NODEPTR, *Tree;
#define GET_KIDS(p)	((p)->kids)
#define PANIC printf
#define STATE_LABEL(p) ((p)->x.state)
#define SET_STATE(p,s) (p)->x.state=(s)
#define DEFAULT_COST	break
#define NO_ACTION(x)

typedef struct COST {
    int cost;
} COST;
#define COST_LESS(a,b) ((a).cost < (b).cost)

static COST COST_INFINITY = { 32767 };
static COST COST_ZERO     = { 0 };

/*static char* burm_string = "FOO";*/
static int _ern = 0;

static int shouldTrace = 0;
static int shouldCover = 0;

int OP_LABEL(NODEPTR p) {
	switch (p->op) {
	case CNSTI:  if (p->val == 0) return 661 /* I0I */;
	default:     return p->op;
	}
}

static void burm_trace(NODEPTR, int, COST);

%}
%term BURP=0 ADDI=309 ADDRLP=295 ASGNI=53
%term CNSTI=21 CVCI=85 I0I=661 INDIRC=67
%declare<void> stmt<int indent>;
%declare<void> reg<int indent>;
%declare<void> disp<int indent>;
%declare<void> rc<int indent>;
%declare<void> con<int indent>;
%%
stmt:	BURP(_,_,_)
	{ return 1; }
	= {
		$immed[2,stmt](10);
	};

stmt:	ASGNI(disp,reg)
	{ $cost[0].cost=$cost[2].cost+$cost[3].cost+1; }
	= {
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
		$action[2](indent+1);
		$action[3](indent+1);
	};

stmt:	reg
	{ $cost[0].cost=$cost[1].cost; }
	= {
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
		$action[1](indent+1);
	};

reg:	ADDI(reg,rc)
	{ $cost[0].cost=$cost[2].cost+$cost[3].cost+1; }
	= {
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
		$action[2](indent+1);
		$action[3](indent+1);
	};

reg:	CVCI(INDIRC(disp))
	{ $cost[0].cost = $cost[3].cost+1; }
	= {
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
		$action[3](indent+1);
	};

reg:	I0I
	{ $cost[0].cost=0; }
	= {
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
	};

reg:	disp
	{ $cost[0].cost=$cost[1].cost+1; }
	= {
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
		$action[1](indent+1);
	};

disp:	ADDI(reg,con)
	{ $cost[0].cost=$cost[2].cost+$cost[3].cost; }
	= {
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
		$action[2](indent+1);
		$action[3](indent+1);
	};

disp:	ADDRLP
	{ $cost[0].cost=0; }
	= {
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
	};

rc:	con
	{ $cost[0].cost=$cost[1].cost; }
	= {
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
		$action[1](indent+1);
	};

rc:	reg
	{ $cost[0].cost=$cost[1].cost; }
	= {
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
		$action[1](indent+1);
	};

con:	CNSTI
	{ $cost[0].cost=0; }
	= {
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
	};

con:	I0I
	{ $cost[0].cost=0; }
	= {
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << "\t";
		std::cerr << burm_string[_ern] << "\n";
	};
%%

/* burm_trace - print trace message for matching p */
static void burm_trace(NODEPTR p, int eruleno, COST cost) {
	if (shouldTrace)
		std::cerr << "0x" << p << " matched " << burm_string[eruleno] << " = " << eruleno << " with cost " << cost.cost << "\n";
}

static void gen(NODEPTR p) {
	if (burm_label(p) == 0)
		std::cerr << "no cover\n";
	else {
		stmt_action(p->x.state,0);
		if (shouldCover != 0)
			dumpCover(p, 1, 0);
	}
}

static Tree tree(int op, Tree l, Tree r) {
	Tree t = (Tree) malloc(sizeof *t);

	t->op = op;
	t->kids[0] = l; t->kids[1] = r;
	t->val = 0;
	t->x.state = 0;
	return t;
}

int main(int argc, char *argv[]) {
	Tree t;
	int i;

	for (i = 1; i < argc ; ++i) {
		if (strcmp(argv[i], "--cover") == 0){
			shouldCover = 1;
		}
		if (strcmp(argv[i], "--trace") == 0){
			shouldTrace = 1;
		}
	}
	printf("i = c + 4;\n");
	t = tree(ASGNI,
		tree(ADDRLP, 0, 0),
		tree(ADDI,
			tree(CVCI, tree(INDIRC, tree(ADDRLP, 0, 0), 0), 0),
			(t = tree(CNSTI, 0, 0), t->val = 4, t)
		)
	);
	gen(t);
	return 0;
}
