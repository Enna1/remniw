// "Hello,World!" code written in brainfuck "++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++."

// RUN: %remniw -emit-llvm %s -o %t ; lli %t | awk '{printf("%c", $1)}' | FileCheck %s
// RUN: %remniw -emit-llvm %s -o %t -debug ; lli %t | awk '{printf("%c", $1)}' | FileCheck %s
// RUN: %remniw -emit-llvm %s -o %t1 ; %remniw-llc %t1 -o %t2.s ; clang %t2.s -o %t3; %t3 | awk '{printf("%c", $1)}' | FileCheck %s
// RUN: %remniw %s -o %t4 ; %t4 | awk '{printf("%c", $1)}' | FileCheck %s

// CHECK: Hello World!

func brainfuck(command_array *[1001]int, input_array *[1001]int) int {
  var bracket_flag int;
  var command int;
  var command_pc int;
  var input_ptr int;
  var data *[1001] int;
  var data_ptr int;
  var tmp int;

  %alloc(data, %sizeof [1001]int);

  /* initialize local variables */
  command_pc = 0;
  input_ptr = 0;
  tmp = 0;
  while (1001 > tmp) {
    (*data)[tmp] = 0;
    tmp = tmp + 1;
  }
  data_ptr = 1001 / 2; /* Move data_ptr to middle of the data array */

  command = (*command_array)[command_pc];
  command_pc = command_pc + 1;
  while(command > 0) {
    /* Move data pointer to next address */
    if (command == 62 /*'>'*/)
      data_ptr = data_ptr + 1;
    /* Move data pointer to previous address */
    else if (command == 60 /*'<'*/)
      data_ptr = data_ptr - 1;
    /* Increase value at current data cell by one */
    else if (command == 43 /*'+'*/)
      (*data)[data_ptr] = (*data)[data_ptr] + 1;
    /* Decrease value at current data cell by one */
    else if (command == 45 /*'-'*/)
      (*data)[data_ptr] = (*data)[data_ptr] - 1;
    /* Output character at current data cell */
    else if (command == 46 /*'.'*/)
      %output (*data)[data_ptr];
    /* Accept one character from input pointer ip and advance to next one */
    else if (command == 44 /*','*/) {
      (*data)[data_ptr] = (*input_array)[input_ptr];
      input_ptr = input_ptr + 1;
    }
    /* When the value at current data cell is 0, advance to next matching ] */
    else if (command == 91 /*'['*/) {
      if ((*data)[data_ptr] == 0) {
        bracket_flag = 1;
        while (bracket_flag > 0) {
          if ((*command_array)[command_pc] == 91 /*'['*/)
            bracket_flag = bracket_flag + 1;
          else if ((*command_array)[command_pc] == 93 /*']'*/)
            bracket_flag = bracket_flag - 1;
          command_pc = command_pc + 1;
        }
      }
    }
    /* Moves the command pointer back to matching opening [ if the value of
       current data cell is non-zero */
    else if (command == 93 /*']'*/) {
      if ((*data)[data_ptr] > 0) {
        /* Move command pointer just before ] */
        command_pc  = command_pc - 2;
        bracket_flag = 1;
        while (bracket_flag > 0) {
          if ((*command_array)[command_pc] == 93 /*']'*/)
            bracket_flag = bracket_flag + 1;
          else if ((*command_array)[command_pc] == 91 /*'['*/)
            bracket_flag = bracket_flag - 1;
          command_pc = command_pc - 1;
        }
        /* Advance pointer after loop to match with opening [ */
        command_pc = command_pc + 1;
      }
    }

    command = (*command_array)[command_pc];
    command_pc = command_pc + 1;
  }

  %dealloc(data);

  return 0;
}

func main() int {
  var code_ *[1001]int;
  var input_ *[1001]int;
  var tmp int;

  %alloc(code_, %sizeof [1001]int);
  %alloc(input_, %sizeof [1001]int);

  /* initialize code array and input array with 0 */
  tmp = 0;
  while (1001 > tmp) {
    (*code_)[tmp] = 0;
    (*input_)[tmp] = 0;
    tmp = tmp + 1;
  }

  /* Since remniw do not support char type,
     we store the char's encoding in ASCII as int type to code array.
     The following code achieves the same effect like
     ```C
     char *hello_world_code =
      "++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>"
      ".<-.<.+++.------.--------.>>+.>++.";
     ```
     */
  tmp = 0;
  (*code_)[tmp] = 43; tmp = tmp + 1; (*code_)[tmp] = 43; tmp = tmp + 1; (*code_)[tmp] = 43; tmp = tmp + 1; (*code_)[tmp] = 43; tmp = tmp + 1; (*code_)[tmp] = 43; tmp = tmp + 1; (*code_)[tmp] = 43; tmp = tmp + 1; (*code_)[tmp] = 43; tmp = tmp + 1; (*code_)[tmp] = 43; tmp = tmp + 1; (*code_)[tmp] = 91; tmp = tmp + 1; (*code_)[tmp] = 62; tmp = tmp + 1; (*code_)[tmp] = 43; tmp = tmp + 1; (*code_)[tmp] = 43; tmp = tmp + 1; (*code_)[tmp] = 43; tmp = tmp + 1; (*code_)[tmp] = 43; tmp = tmp + 1; (*code_)[tmp] = 91; tmp = tmp + 1; (*code_)[tmp] = 62; tmp = tmp + 1; (*code_)[tmp] = 43; tmp = tmp + 1; (*code_)[tmp] = 43; tmp = tmp + 1; (*code_)[tmp] = 62; tmp = tmp + 1; (*code_)[tmp] = 43; tmp = tmp + 1; (*code_)[tmp] = 43; tmp = tmp + 1; (*code_)[tmp] = 43; tmp = tmp + 1; (*code_)[tmp] = 62; tmp = tmp + 1; (*code_)[tmp] = 43; tmp = tmp + 1; (*code_)[tmp] = 43; tmp = tmp + 1; (*code_)[tmp] = 43; tmp = tmp + 1; (*code_)[tmp] = 62; tmp = tmp + 1; (*code_)[tmp] = 43; tmp = tmp + 1; (*code_)[tmp] = 60; tmp = tmp + 1; (*code_)[tmp] = 60; tmp = tmp + 1; (*code_)[tmp] = 60; tmp = tmp + 1; (*code_)[tmp] = 60; tmp = tmp + 1; (*code_)[tmp] = 45; tmp = tmp + 1; (*code_)[tmp] = 93; tmp = tmp + 1; (*code_)[tmp] = 62; tmp = tmp + 1; (*code_)[tmp] = 43; tmp = tmp + 1; (*code_)[tmp] = 62; tmp = tmp + 1; (*code_)[tmp] = 43; tmp = tmp + 1; (*code_)[tmp] = 62; tmp = tmp + 1; (*code_)[tmp] = 45; tmp = tmp + 1; (*code_)[tmp] = 62; tmp = tmp + 1; (*code_)[tmp] = 62; tmp = tmp + 1; (*code_)[tmp] = 43; tmp = tmp + 1; (*code_)[tmp] = 91; tmp = tmp + 1; (*code_)[tmp] = 60; tmp = tmp + 1; (*code_)[tmp] = 93; tmp = tmp + 1; (*code_)[tmp] = 60; tmp = tmp + 1; (*code_)[tmp] = 45; tmp = tmp + 1; (*code_)[tmp] = 93; tmp = tmp + 1; (*code_)[tmp] = 62; tmp = tmp + 1; (*code_)[tmp] = 62; tmp = tmp + 1; (*code_)[tmp] = 46; tmp = tmp + 1; (*code_)[tmp] = 62; tmp = tmp + 1; (*code_)[tmp] = 45; tmp = tmp + 1; (*code_)[tmp] = 45; tmp = tmp + 1; (*code_)[tmp] = 45; tmp = tmp + 1; (*code_)[tmp] = 46; tmp = tmp + 1; (*code_)[tmp] = 43; tmp = tmp + 1; (*code_)[tmp] = 43; tmp = tmp + 1; (*code_)[tmp] = 43; tmp = tmp + 1; (*code_)[tmp] = 43; tmp = tmp + 1; (*code_)[tmp] = 43; tmp = tmp + 1; (*code_)[tmp] = 43; tmp = tmp + 1; (*code_)[tmp] = 43; tmp = tmp + 1; (*code_)[tmp] = 46; tmp = tmp + 1; (*code_)[tmp] = 46; tmp = tmp + 1; (*code_)[tmp] = 43; tmp = tmp + 1; (*code_)[tmp] = 43; tmp = tmp + 1; (*code_)[tmp] = 43; tmp = tmp + 1; (*code_)[tmp] = 46; tmp = tmp + 1; (*code_)[tmp] = 62; tmp = tmp + 1; (*code_)[tmp] = 62; tmp = tmp + 1; (*code_)[tmp] = 46; tmp = tmp + 1; (*code_)[tmp] = 60; tmp = tmp + 1; (*code_)[tmp] = 45; tmp = tmp + 1; (*code_)[tmp] = 46; tmp = tmp + 1; (*code_)[tmp] = 60; tmp = tmp + 1; (*code_)[tmp] = 46; tmp = tmp + 1; (*code_)[tmp] = 43; tmp = tmp + 1; (*code_)[tmp] = 43; tmp = tmp + 1; (*code_)[tmp] = 43; tmp = tmp + 1; (*code_)[tmp] = 46; tmp = tmp + 1; (*code_)[tmp] = 45; tmp = tmp + 1; (*code_)[tmp] = 45; tmp = tmp + 1; (*code_)[tmp] = 45; tmp = tmp + 1; (*code_)[tmp] = 45; tmp = tmp + 1; (*code_)[tmp] = 45; tmp = tmp + 1; (*code_)[tmp] = 45; tmp = tmp + 1; (*code_)[tmp] = 46; tmp = tmp + 1; (*code_)[tmp] = 45; tmp = tmp + 1; (*code_)[tmp] = 45; tmp = tmp + 1; (*code_)[tmp] = 45; tmp = tmp + 1; (*code_)[tmp] = 45; tmp = tmp + 1; (*code_)[tmp] = 45; tmp = tmp + 1; (*code_)[tmp] = 45; tmp = tmp + 1; (*code_)[tmp] = 45; tmp = tmp + 1; (*code_)[tmp] = 45; tmp = tmp + 1; (*code_)[tmp] = 46; tmp = tmp + 1; (*code_)[tmp] = 62; tmp = tmp + 1; (*code_)[tmp] = 62; tmp = tmp + 1; (*code_)[tmp] = 43; tmp = tmp + 1; (*code_)[tmp] = 46; tmp = tmp + 1; (*code_)[tmp] = 62; tmp = tmp + 1; (*code_)[tmp] = 43; tmp = tmp + 1; (*code_)[tmp] = 43; tmp = tmp + 1;  (*code_)[tmp] = 46; tmp = tmp + 1;

  /* Let's interpret the above brainfuck code */
  tmp = brainfuck(code_, input_);

  %dealloc(code_);
  %dealloc(input_);

  return 0;
}