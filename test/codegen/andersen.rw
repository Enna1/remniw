// Emit LLVM IR
// RUN: %remniw -emit-llvm %s -o %t1
// RUN: echo 1 | lli %t1 | FileCheck %s --check-prefix=CHECK_B
// RUN: echo 111 | lli %t1 | FileCheck %s --check-prefix=CHECK_A

// Emit X86 assembly
// RUN: %remniw-llc %t1 -o %t2.s ; clang %t2.s -o %t3
// RUN: echo 1 | %t3 | FileCheck %s --check-prefix=CHECK_B
// RUN: echo 11111 | %t3 | FileCheck %s --check-prefix=CHECK_A

// RUN: %remniw %s -o %t4
// RUN: echo 1 | %t4 | FileCheck %s --check-prefix=CHECK_B
// RUN: echo 111111 | %t4 | FileCheck %s --check-prefix=CHECK_A

// Emit RISCV assembly
// RUN: %remniw-llc --target=riscv %t1 -o %t2.riscv.s ; \
// RUN:     %riscv-cc %t2.riscv.s -o %t3.riscv.exe
// RUN: echo 1 | qemu-riscv64 %t3.riscv.exe | FileCheck %s --check-prefix=CHECK_B
// RUN: echo 11111 | qemu-riscv64 %t3.riscv.exe | FileCheck %s --check-prefix=CHECK_A

func f() int {
    var a,b *int;
    var d,e,tmp int;
    a = &d;
    b = &e;
    a = b;
    *a = tmp;
    return 0;
}

func main() int {
    var a,b int;
    var w,x,y,tmp *int;
    var z **int;
    z = &x;
    w = &a;
    a = 42;
    b = %input;
    if (a > b) {
      tmp = &a;
      y = &b;
    } else {
      x = &b;
      y = &a;
    }
    %output *y;
    return 0;
}

// CHECK_A: 42
// CHECK_B: 1
