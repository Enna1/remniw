// Emit LLVM IR
// RUN: %remniw -emit-llvm %s -o %t1
// RUN: echo 10 | lli %t1 | FileCheck %s --check-prefix=CHECK_P
// RUN: echo -10 | lli %t1 | FileCheck %s --check-prefix=CHECK_N
// RUN: echo 0 | lli %t1 | FileCheck %s --check-prefix=CHECK_Z

// Emit X86 assembly
// RUN: %remniw-llc %t1 -o %t2.s ; clang %t2.s -o %t3
// RUN: echo 10 | %t3 | FileCheck %s --check-prefix=CHECK_P
// RUN: echo -10 | %t3 | FileCheck %s --check-prefix=CHECK_N
// RUN: echo 0 | %t3 | FileCheck %s --check-prefix=CHECK_Z
// RUN: %remniw %s -o %t4
// RUN: echo 10 | %t4 | FileCheck %s --check-prefix=CHECK_P
// RUN: echo -10 | %t4 | FileCheck %s --check-prefix=CHECK_N
// RUN: echo 0 | %t4 | FileCheck %s --check-prefix=CHECK_Z

// Emit RISCV assembly
// RUN: %remniw-llc --target=riscv %t1 -o %t2.riscv.s ; \
// RUN:     riscv64-unknown-linux-gnu-gcc -static %t2.riscv.s -o %t3.riscv.exe
// RUN: echo 10 | qemu-riscv64 %t3.riscv.exe | FileCheck %s --check-prefix=CHECK_P
// RUN: echo -10 | qemu-riscv64 %t3.riscv.exe | FileCheck %s --check-prefix=CHECK_N
// RUN: echo 0 | qemu-riscv64 %t3.riscv.exe | FileCheck %s --check-prefix=CHECK_Z

func inc(i int) int { return i+1; }
func dec(j int) int { return j-1; }
func ide(k int) int { return k; }

func foo(n int) int {
    var r int;
    if (n == 0) { r = dec(n); }
    r = inc(n);
    return r;
}

func main() int {
    var x,y int;
    x = %input;
    if (x > 0) { y = foo(x); } else { y = foo(x); }
    %output y;
    return 0;
}

// CHECK_P: 11
// CHECK_N: -9
// CHECK_Z: 1
